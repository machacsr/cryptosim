// <auto-generated />
using System;
using CryptoSim.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoSim.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250424173007_ListingArchivedAtAllowNullable")]
    partial class ListingArchivedAtAllowNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("CryptoSim.Model.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("CryptoSim.Model.CryptoListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CryptoId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.ToTable("CryptoListings");
                });

            modelBuilder.Entity("CryptoSim.Model.CryptoTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CryptoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CryptoListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CryptoListingId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("CryptoTransactions");
                });

            modelBuilder.Entity("CryptoSim.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CryptoSim.Model.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CryptoSim.Model.CryptoListing", b =>
                {
                    b.HasOne("CryptoSim.Model.Crypto", "Crypto")
                        .WithMany("CryptoListings")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");
                });

            modelBuilder.Entity("CryptoSim.Model.CryptoTransaction", b =>
                {
                    b.HasOne("CryptoSim.Model.CryptoListing", "CryptoListing")
                        .WithMany("CryptoTransactions")
                        .HasForeignKey("CryptoListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoSim.Model.User", "User")
                        .WithMany("CryptoTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoSim.Model.Wallet", "Wallet")
                        .WithMany("CryptoTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoListing");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoSim.Model.Wallet", b =>
                {
                    b.HasOne("CryptoSim.Model.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("CryptoSim.Model.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoSim.Model.Crypto", b =>
                {
                    b.Navigation("CryptoListings");
                });

            modelBuilder.Entity("CryptoSim.Model.CryptoListing", b =>
                {
                    b.Navigation("CryptoTransactions");
                });

            modelBuilder.Entity("CryptoSim.Model.User", b =>
                {
                    b.Navigation("CryptoTransactions");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CryptoSim.Model.Wallet", b =>
                {
                    b.Navigation("CryptoTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
